name: Main Build and Release

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
    
      - name: Install PyInstaller
        run: pip install pyinstaller
      
      - name: Build executable
        run: |
            pyinstaller --onefile --distpath dist/YASS-Frontend-${{ matrix.os }}-${{ matrix.arch }} --name YASS-Frontend-${{ matrix.os }}-${{ matrix.arch }} main.py

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: YASS-Frontend-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/YASS-Frontend-${{ matrix.os }}-${{ matrix.arch }}/

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4

      - name: Delete previous pre-release
        run: |
          PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -n "$PREV_TAG" ]; then
            gh release delete "$PREV_TAG" --yes
          else
            echo "No previous release found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set release version
        id: version
        run: |
          git fetch --tags
          VERSION=$(git describe --tags --abbrev=0 --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: "Release ${{ env.VERSION }}"
          body: |
            预发布版本:
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: true

      - name: Upload Linux-amd64 binary to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1  # Updated to v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/YASS-Frontend-linux-amd64/YASS-Frontend-linux-amd64
          asset_name: YASS-Frontend-Linux-AMD64-Dev
          asset_content_type: application/octet-stream

      - name: Upload Linux-arm64 binary to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1  # Updated to v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/YASS-Frontend-linux-arm64/YASS-Frontend-linux-arm64
          asset_name: YASS-Frontend-Linux-ARM64-Dev
          asset_content_type: application/octet-stream
